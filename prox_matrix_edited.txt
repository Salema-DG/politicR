prox_matrix = function (dataset, ..., legislature = c(1:20), commission = c(1:11), 
          type = c("law", NA, "resolution", "constitutional", "correction", 
                   "inquiry", "recommendation", "validation", "statute"), 
          stage = c("general", "final", "other", "specific", "recommendation"), 
          vec_parties = c("CDU", "PCP", "PEV", "ID", "MDP/CDE", "MDP", 
                          "BE", "UDP", "L", "PAN", "UEDS", "PS", "ASDI", "PSN", 
                          "PRD", "PSD", "IL", "CDS", "PPM", "CH"), initiated_by = c("Government and others", 
                                                                                    "CDU", "PCP", "PEV", "ID", "MDP/CDE", "MDP", "BE", "UDP", 
                                                                                    "L", "PAN", "UEDS", "PS", "ASDI", "PSN", "PRD", "PSD", 
                                                                                    "IL", "CDS", "PPM", "CH"), min_n_votes = 0, unanimous = c(0, 
                                                                                                                                              1), plot_plotly = TRUE, plot = TRUE, inference = F, n_boot = 1000, 
          seed_for_boot = 12345, app = F) 
{
  bill_type <- data <- dismatch <- id_com_cross <- id_vot <- idv <- idv2 <- legis <- match_approve <- match_disapprove <- max_conf_interval <- mean_dismatch_diff_max <- mean_dismatch_diff_min <- min_conf_interval <- n <- n_dep <- n_votes <- n_votes_against <- n_votes_for <- n_votes_for_against_0 <- n_votes_for_against_1 <- n_votos <- partido <- partido2 <- perc_dismatch <- perc_match <- perc_match_against <- perc_match_for <- perc_match_for_against_0 <- perc_match_for_against_1 <- proponente <- total_dep <- unanime <- vote_stage <- voto <- votos_legis_partido <- NULL
  
  if(app == T){
    p2 = dataset
  }
  
  else {
    df_temp <- dataset %>% dplyr::select(id_vot, partido, 
                                         voto, n_votos, legis, n_dep, total_dep, data, id_com_cross, 
                                         bill_type, vote_stage, proponente, votos_legis_partido)
    df_temp <- dataset %>% dplyr::filter(legis %in% legislature) %>% 
      dplyr::filter(purrr::map_lgl(id_com_cross, ~any(.x %in% 
                                                        commission))) %>% dplyr::filter(bill_type %in% 
                                                                                          type) %>% dplyr::filter(vote_stage %in% stage) %>% 
      dplyr::filter(votos_legis_partido >= min_n_votes) %>% 
      dplyr::filter(purrr::map_lgl(proponente, ~any(.x %in% 
                                                      initiated_by))) %>% dplyr::filter(unanime %in% 
                                                                                          unanimous)
    my_parties <- rlang::enexprs(...)
    if (length(my_parties) != 0) {
      df_temp %<>% dplyr::filter(partido %in% my_parties)
    }
    df_temp %<>% dplyr::filter(partido %in% vec_parties)
    if (nrow(df_temp) == 0) {
      p2 = tibble::tibble(partido = "Not available")
    }
    else {
      ordered_parties <- df_temp %>% dplyr::distinct(partido) %>% 
        dplyr::arrange(factor(partido, levels = vec_parties))
      df_unique <- tidyr::expand_grid(partido = ordered_parties$partido, 
                                      partido2 = ordered_parties$partido)
      df_nest_bill <- df_temp %>% prox_by_bill()
      perc_match_vec <- df_nest_bill %>% boot_prox()
      n_votes_vec <- df_nest_bill %>% boot_prox(type = "length")
      df_unique$perc_match <- perc_match_vec %>% stretch_for_df_unique()
      n_for_diag <- df_temp %>% dplyr::count(partido) %>% 
        dplyr::arrange(factor(partido, levels = vec_parties)) %>% 
        dplyr::pull(n)
      df_unique$n_votes <- n_votes_vec %>% stretch_for_df_unique(diag_to_insert = n_for_diag)
      df_unique[df_unique == "NaN"] <- NA
      df_unique %<>% dplyr::mutate(perc_match = dplyr::case_when(n_votes < 
                                                                   min_n_votes ~ NA, TRUE ~ perc_match))
      if (inference == TRUE) {
        set.seed(seed_for_boot)
        res <- boot::boot(data = df_nest_bill, statistic = boot_prox, 
                          R = n_boot, stype = "i", sim = "ordinary", 
                          na_sub = TRUE)
        na_vec <- rep(NA, length(res$t0))
        pos <- which(res$t0 != -1)
        list_ci <- pos %>% purrr::map(~{
          a <- boot::boot.ci(res, type = "bca", index = .x)
          a$bca[4:5]
        })
        ci_vec <- list_ci %>% unlist()
        low_ci_vec <- ci_vec[seq(1, length(list_ci) * 
                                   2, by = 2)]
        high_ci_vec <- ci_vec[seq(2, length(list_ci) * 
                                    2, by = 2)]
        na_vec[pos] <- low_ci_vec
        low_ci_vec <- na_vec
        na_vec[pos] <- high_ci_vec
        high_ci_vec <- na_vec
        df_unique$low_ci <- low_ci_vec %>% stretch_for_df_unique()
        df_unique$high_ci <- high_ci_vec %>% stretch_for_df_unique()
        df_unique %<>% dplyr::mutate(low_ci = (low_ci * 
                                                 100) %>% round(2), high_ci = (high_ci * 100) %>% 
                                       round(2))
      }
      df_unique %<>% dplyr::mutate(dplyr::across(c(partido, 
                                                   partido2), ~{
                                                     dplyr::case_when(.x %in% c("MDP/CDE") ~ "MDP", 
                                                                      TRUE ~ .x)
                                                   }))
      p2 <- df_unique %>% dplyr::mutate(perc_match = (perc_match * 
                                                        100) %>% round(2)) %>% dplyr::filter(partido != 
                                                                                               "Independente" & partido2 != "Independente") %>% 
        dplyr::mutate(partido = partido %>% forcats::fct_relevel(ordered_parties$partido), 
                      partido2 = partido2 %>% forcats::fct_relevel(rev(ordered_parties$partido)))
    }
  }
  if (plot == T) {
    if (inference == T) {
      matrix_chart = p2 %>% ggplot2::ggplot(ggplot2::aes(x = partido, 
                                                         y = partido2, fill = perc_match, text = paste0(partido, 
                                                                                                        " and ", partido2, "<br>", "N. votes: ", n_votes, 
                                                                                                        "<br>", "Min. conf. interval: ", low_ci, "%", 
                                                                                                        "<br>", "Max. conf. interval: ", high_ci, "%", 
                                                                                                        "<br>"))) + ggplot2::geom_tile(color = "white", 
                                                                                                                                       linetype = 1, lwd = 1) + ggplot2::coord_fixed() + 
        ggplot2::geom_text(ggplot2::aes(label = paste0(round(perc_match), 
                                                       "%")), color = "white", size = ggplot2::rel(3.5), 
                           fontface = "bold") + ggplot2::scale_x_discrete(limits = NULL, 
                                                                          expand = ggplot2::expansion(add = 0, mult = c(0.01, 
                                                                                                                        0.01))) + ggplot2::scale_y_discrete(limits = NULL, 
                                                                                                                                                            expand = ggplot2::expansion(add = 0, mult = c(0.01, 
                                                                                                                                                                                                          0.01))) + ggplot2::scale_fill_gradientn(colours = RColorBrewer::brewer.pal(4, 
                                                                                                                                                                                                                                                                                     "BrBG"), na.value = "grey20") + ggplot2::theme_minimal() + 
        ggplot2::theme(legend.position = "none", axis.title = ggplot2::element_blank(), 
                       axis.text = ggplot2::element_text(size = ggplot2::rel(1)))
    }
    else {
      matrix_chart = p2 %>% ggplot2::ggplot(ggplot2::aes(x = partido, 
                                                         y = partido2, fill = perc_match, text = paste0(partido, 
                                                                                                        " and ", partido2, "<br>", "N. votes: ", n_votes, 
                                                                                                        "<br>"))) + ggplot2::geom_tile(color = "white", 
                                                                                                                                       linetype = 1, lwd = 1) + ggplot2::coord_fixed() + 
        ggplot2::scale_fill_gradientn(colours = RColorBrewer::brewer.pal(4, 
                                                                         "BrBG"), na.value = "grey20") + ggplot2::geom_text(ggplot2::aes(label = paste0(round(perc_match), 
                                                                                                                                                        "%")), color = "white", size = ggplot2::rel(3.5), 
                                                                                                                            fontface = "bold") + ggplot2::scale_x_discrete(limits = NULL, 
                                                                                                                                                                           expand = ggplot2::expansion(add = 0, mult = c(0.01, 
                                                                                                                                                                                                                         0.01))) + ggplot2::scale_y_discrete(limits = NULL, 
                                                                                                                                                                                                                                                             expand = ggplot2::expansion(add = 0, mult = c(0.01, 
                                                                                                                                                                                                                                                                                                           0.01))) + ggplot2::theme_minimal() + ggplot2::theme(legend.position = "none", 
                                                                                                                                                                                                                                                                                                                                                               axis.title = ggplot2::element_blank(), axis.text = ggplot2::element_text(size = ggplot2::rel(1)))
    }
    if (plot_plotly == TRUE) {
      matrix_chart %<>% plotly::ggplotly(tooltip = c("text")) %>% 
        plotly::config(displayModeBar = F) %>% plotly::layout(xaxis = list(fixedrange = TRUE), 
                                                              yaxis = list(fixedrange = TRUE))
    }
    return(matrix_chart)
  }
  else {
    return(p2)
  }
}